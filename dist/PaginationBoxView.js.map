{"version":3,"sources":["../react_components/PaginationBoxView.js"],"names":["PaginationBoxView","props","handlePreviousPage","selected","state","evt","preventDefault","returnValue","handlePageSelected","handleNextPage","pageCount","setState","callCallback","handleBreakClick","index","getForwardJump","getBackwardJump","onPageChange","selectedItem","pagination","items","pageRangeDisplayed","marginPagesDisplayed","breakLabel","breakClassName","breakLinkClassName","push","getPageElement","leftSide","rightSide","page","breakView","createPageView","length","bind","initialSelected","initialPage","forcePage","disableInitialCallback","nextProps","forwardJump","backwardJump","pageIndex","hrefBuilder","pageClassName","pageLinkClassName","activeClassName","activeLinkClassName","extraAriaContext","disabledClassName","previousClassName","nextClassName","containerClassName","previousLinkClassName","previousLabel","nextLinkClassName","nextLabel","previousClasses","nextClasses","previousAriaDisabled","nextAriaDisabled","previousAnchorProps","onClick","className","href","role","onKeyPress","tabIndex","nextAnchorProps","Component","propTypes","PropTypes","number","isRequired","node","oneOfType","string","func","bool","defaultProps"],"mappings":"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","file":"PaginationBoxView.js","sourcesContent":["'use strict';\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport PageView from './PageView';\nimport BreakView from './BreakView';\n\nexport default class PaginationBoxView extends Component {\n  static propTypes = {\n    pageCount: PropTypes.number.isRequired,\n    pageRangeDisplayed: PropTypes.number.isRequired,\n    marginPagesDisplayed: PropTypes.number.isRequired,\n    previousLabel: PropTypes.node,\n    nextLabel: PropTypes.node,\n    breakLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n    hrefBuilder: PropTypes.func,\n    onPageChange: PropTypes.func,\n    initialPage: PropTypes.number,\n    forcePage: PropTypes.number,\n    disableInitialCallback: PropTypes.bool,\n    containerClassName: PropTypes.string,\n    pageClassName: PropTypes.string,\n    pageLinkClassName: PropTypes.string,\n    activeClassName: PropTypes.string,\n    activeLinkClassName: PropTypes.string,\n    previousClassName: PropTypes.string,\n    nextClassName: PropTypes.string,\n    previousLinkClassName: PropTypes.string,\n    nextLinkClassName: PropTypes.string,\n    disabledClassName: PropTypes.string,\n    breakClassName: PropTypes.string,\n    breakLinkClassName: PropTypes.string,\n    extraAriaContext: PropTypes.string,\n  };\n\n  static defaultProps = {\n    pageCount: 10,\n    pageRangeDisplayed: 2,\n    marginPagesDisplayed: 3,\n    activeClassName: 'selected',\n    previousClassName: 'previous',\n    nextClassName: 'next',\n    previousLabel: 'Previous',\n    nextLabel: 'Next',\n    breakLabel: '...',\n    disabledClassName: 'disabled',\n    disableInitialCallback: false,\n  };\n\n  constructor(props) {\n    super(props);\n\n    let initialSelected;\n    if (props.initialPage) {\n      initialSelected = props.initialPage;\n    } else if (props.forcePage) {\n      initialSelected = props.forcePage;\n    } else {\n      initialSelected = 0;\n    }\n\n    this.state = {\n      selected: initialSelected,\n    };\n  }\n\n  componentDidMount() {\n    const { initialPage, disableInitialCallback } = this.props;\n    // Call the callback with the initialPage item:\n    if (typeof initialPage !== 'undefined' && !disableInitialCallback) {\n      this.callCallback(initialPage);\n    }\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (\n      typeof nextProps.forcePage !== 'undefined' &&\n      this.props.forcePage !== nextProps.forcePage\n    ) {\n      this.setState({ selected: nextProps.forcePage });\n    }\n  }\n\n  handlePreviousPage = evt => {\n    const { selected } = this.state;\n    evt.preventDefault ? evt.preventDefault() : (evt.returnValue = false);\n    if (selected > 0) {\n      this.handlePageSelected(selected - 1, evt);\n    }\n  };\n\n  handleNextPage = evt => {\n    const { selected } = this.state;\n    const { pageCount } = this.props;\n\n    evt.preventDefault ? evt.preventDefault() : (evt.returnValue = false);\n    if (selected < pageCount - 1) {\n      this.handlePageSelected(selected + 1, evt);\n    }\n  };\n\n  handlePageSelected = (selected, evt) => {\n    evt.preventDefault ? evt.preventDefault() : (evt.returnValue = false);\n\n    if (this.state.selected === selected) return;\n\n    this.setState({ selected: selected });\n\n    // Call the callback with the new selected item:\n    this.callCallback(selected);\n  };\n\n  getForwardJump() {\n    const { selected } = this.state;\n    const { pageCount, pageRangeDisplayed } = this.props;\n\n    const forwardJump = selected + pageRangeDisplayed;\n    return forwardJump >= pageCount ? pageCount - 1 : forwardJump;\n  }\n\n  getBackwardJump() {\n    const { selected } = this.state;\n    const { pageRangeDisplayed } = this.props;\n\n    const backwardJump = selected - pageRangeDisplayed;\n    return backwardJump < 0 ? 0 : backwardJump;\n  }\n\n  handleBreakClick = (index, evt) => {\n    evt.preventDefault ? evt.preventDefault() : (evt.returnValue = false);\n\n    const { selected } = this.state;\n\n    this.handlePageSelected(\n      selected < index ? this.getForwardJump() : this.getBackwardJump(),\n      evt\n    );\n  };\n\n  hrefBuilder(pageIndex) {\n    const { hrefBuilder, pageCount } = this.props;\n    if (\n      hrefBuilder &&\n      pageIndex !== this.state.selected &&\n      pageIndex >= 0 &&\n      pageIndex < pageCount\n    ) {\n      return hrefBuilder(pageIndex + 1);\n    }\n  }\n\n  callCallback = selectedItem => {\n    if (\n      typeof this.props.onPageChange !== 'undefined' &&\n      typeof this.props.onPageChange === 'function'\n    ) {\n      this.props.onPageChange({ selected: selectedItem });\n    }\n  };\n\n  getPageElement(index) {\n    const { selected } = this.state;\n    const {\n      pageClassName,\n      pageLinkClassName,\n      activeClassName,\n      activeLinkClassName,\n      extraAriaContext,\n    } = this.props;\n\n    return (\n      <PageView\n        key={index}\n        onClick={this.handlePageSelected.bind(null, index)}\n        selected={selected === index}\n        pageClassName={pageClassName}\n        pageLinkClassName={pageLinkClassName}\n        activeClassName={activeClassName}\n        activeLinkClassName={activeLinkClassName}\n        extraAriaContext={extraAriaContext}\n        href={this.hrefBuilder(index)}\n        page={index + 1}\n      />\n    );\n  }\n\n  pagination = () => {\n    const items = [];\n    const {\n      pageRangeDisplayed,\n      pageCount,\n      marginPagesDisplayed,\n      breakLabel,\n      breakClassName,\n      breakLinkClassName,\n    } = this.props;\n\n    const { selected } = this.state;\n\n    if (pageCount <= pageRangeDisplayed) {\n      for (let index = 0; index < pageCount; index++) {\n        items.push(this.getPageElement(index));\n      }\n    } else {\n      let leftSide = pageRangeDisplayed / 2;\n      let rightSide = pageRangeDisplayed - leftSide;\n\n      // If the selected page index is on the default right side of the pagination,\n      // we consider that the new right side is made up of it (= only one break element).\n      // If the selected page index is on the default left side of the pagination,\n      // we consider that the new left side is made up of it (= only one break element).\n      if (selected > pageCount - pageRangeDisplayed / 2) {\n        rightSide = pageCount - selected;\n        leftSide = pageRangeDisplayed - rightSide;\n      } else if (selected < pageRangeDisplayed / 2) {\n        leftSide = selected;\n        rightSide = pageRangeDisplayed - leftSide;\n      }\n\n      let index;\n      let page;\n      let breakView;\n      let createPageView = index => this.getPageElement(index);\n\n      for (index = 0; index < pageCount; index++) {\n        page = index + 1;\n\n        // If the page index is lower than the margin defined,\n        // the page has to be displayed on the left side of\n        // the pagination.\n        if (page <= marginPagesDisplayed) {\n          items.push(createPageView(index));\n          continue;\n        }\n\n        // If the page index is greater than the page count\n        // minus the margin defined, the page has to be\n        // displayed on the right side of the pagination.\n        if (page > pageCount - marginPagesDisplayed) {\n          items.push(createPageView(index));\n          continue;\n        }\n\n        // If the page index is near the selected page index\n        // and inside the defined range (pageRangeDisplayed)\n        // we have to display it (it will create the center\n        // part of the pagination).\n        if (index >= selected - leftSide && index <= selected + rightSide) {\n          items.push(createPageView(index));\n          continue;\n        }\n\n        // If the page index doesn't meet any of the conditions above,\n        // we check if the last item of the current \"items\" array\n        // is a break element. If not, we add a break element, else,\n        // we do nothing (because we don't want to display the page).\n        if (breakLabel && items[items.length - 1] !== breakView) {\n          breakView = (\n            <BreakView\n              key={index}\n              breakLabel={breakLabel}\n              breakClassName={breakClassName}\n              breakLinkClassName={breakLinkClassName}\n              onClick={this.handleBreakClick.bind(null, index)}\n            />\n          );\n          items.push(breakView);\n        }\n      }\n    }\n\n    return items;\n  };\n\n  render() {\n    const {\n      disabledClassName,\n      previousClassName,\n      nextClassName,\n      pageCount,\n      containerClassName,\n      previousLinkClassName,\n      previousLabel,\n      nextLinkClassName,\n      nextLabel\n    } = this.props;\n\n    const { selected } = this.state;\n\n    const previousClasses = previousClassName + (selected === 0 ? ` ${disabledClassName}` : '');\n    const nextClasses = nextClassName + (selected === pageCount - 1 ? ` ${disabledClassName}` : '');\n\n    const previousAriaDisabled = selected === 0 ? 'true' : 'false';\n    const nextAriaDisabled = selected === pageCount - 1 ? 'true' : 'false';\n\n    const previousAnchorProps = {\n      onClick: this.handlePreviousPage,\n      className: previousLinkClassName,\n      href: this.hrefBuilder(selected - 1),\n      role: 'button',\n      onKeyPress: this.handlePreviousPage,\n      'aria-disabled': previousAriaDisabled,\n    }\n\n    if (!previousAriaDisabled) {\n      previousAnchorProps.tabIndex = '0';\n    }\n\n    const nextAnchorProps = {\n      onClick: this.handleNextPage,\n      className: nextLinkClassName,\n      href: this.hrefBuilder(selected + 1),\n      role: 'button',\n      onKeyPress: this.handleNextPage,\n      'aria-disabled': nextAriaDisabled,\n    }\n\n    if (!nextAriaDisabled) {\n      nextAnchorProps.tabIndex = '0';\n    }\n\n    return (\n      <ul className={containerClassName}>\n        <li className={previousClasses}>\n          <a {...previousAnchorProps}>\n            {previousLabel}\n          </a>\n\n        </li>\n\n        {this.pagination()}\n\n        <li className={nextClasses}>\n          <a {...nextAnchorProps}>\n            {nextLabel}\n          </a>\n        </li>\n      </ul>\n    );\n  }\n};\n"]}